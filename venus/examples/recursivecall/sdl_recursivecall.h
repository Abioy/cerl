/*
	Description: 	Do not edit this file manually
	Author:			SDL Compiler
*/

#ifndef SDL_RECURSIVECALL_H
#define SDL_RECURSIVECALL_H

#ifndef SDL_RECURSIVECALL_BASE_H
#include "sdl_recursivecall_base.h"
#endif

#ifndef VENUS_CONNECTION_H
#include <venus/Connection.h>
#endif

#pragma pack(1)

namespace recursivecall {


class CalcA : public cerl::Connection, public CalcABase
{
public:
	CalcA()
	{}

	CalcA(const cerl::Connection& conn)
		: cerl::Connection(conn)
	{}

	bool cerl_call add(cerl::ScopedAlloc& alloc,
		_AddResult& _result,
		const cerl::NInformation& node,
		const NUM32 number1,
		const NUM32 number2
		)
	{
		_AddArgs _args = {node, number1, number2};
		return cerl::Connection::dbg_call(this, alloc, _result, (cerl::FID)code_add, _args);
	}
};

class SyncCalcA : public CalcABase
{
private:
	cerl::SyncConnection& m_conn;

public:
	SyncCalcA(cerl::SyncConnection& conn)
		: m_conn(conn)
	{}

	bool cerl_call add(cerl::ScopedAlloc& alloc,
		_AddResult& _result,
		const cerl::NInformation& node,
		const NUM32 number1,
		const NUM32 number2
		)
	{
		_AddArgs _args = {node, number1, number2};
		return m_conn.dbg_call(this, alloc, _result, (cerl::FID)code_add, _args);
	}
};

class CalcB : public cerl::Connection, public CalcBBase
{
public:
	CalcB()
	{}

	CalcB(const cerl::Connection& conn)
		: cerl::Connection(conn)
	{}

	bool cerl_call minus(cerl::ScopedAlloc& alloc,
		_MinusResult& _result,
		const NUM32 number1,
		const NUM32 number2
		)
	{
		_MinusArgs _args = {number1, number2};
		return cerl::Connection::dbg_call(this, alloc, _result, (cerl::FID)code_minus, _args);
	}
};

class SyncCalcB : public CalcBBase
{
private:
	cerl::SyncConnection& m_conn;

public:
	SyncCalcB(cerl::SyncConnection& conn)
		: m_conn(conn)
	{}

	bool cerl_call minus(cerl::ScopedAlloc& alloc,
		_MinusResult& _result,
		const NUM32 number1,
		const NUM32 number2
		)
	{
		_MinusArgs _args = {number1, number2};
		return m_conn.dbg_call(this, alloc, _result, (cerl::FID)code_minus, _args);
	}
};

} //namespace

#pragma pack()

#endif /* SDL_RECURSIVECALL_H */ 
